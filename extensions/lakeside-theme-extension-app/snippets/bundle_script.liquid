<script>
(function() {
  'use strict';
  
  // Bundle state management
  const BundleManager = {
    bundles: {},
    
    init: function(bundleId) {
      const container = document.querySelector(`[data-bundle-id="${bundleId}"]`);
      this.bundles[bundleId] = {
        size: parseInt(container.dataset.bundleSize),
        variantId: container.dataset.bundleVariantId,
        items: [],
        slots: []
      };
      
      this.setupEventListeners(bundleId);
      this.renderBundleSlots(bundleId);
    },
    
    setupEventListeners: function(bundleId) {
      const container = document.querySelector(`[data-bundle-id="${bundleId}"]`);
      
      // Add to bundle buttons
      container.addEventListener('click', (e) => {
        if (e.target.classList.contains('add-to-bundle-btn')) {
          const productId = e.target.dataset.productId;
          const variantId = e.target.dataset.variantId;
          this.addToBundle(bundleId, productId, variantId);
        }
      });
      
      // Add to cart direct button
      container.addEventListener('click', (e) => {
        if (e.target.classList.contains('add-to-cart-direct-btn')) {
          const productId = e.target.dataset.productId;
          const variantId = e.target.dataset.variantId;
          this.addToCartDirect(bundleId, productId, variantId);
        }
      });
      
      // Quantity controls
      container.addEventListener('click', (e) => {
        if (e.target.classList.contains('quantity-btn')) {
          const productId = e.target.dataset.productId;
          const variantId = e.target.dataset.variantId;
          const variant = e.target.dataset.variant;
          const isPlus = e.target.classList.contains('plus-btn');
          this.updateQuantity(bundleId, productId, variantId, variant, isPlus ? 1 : -1);
        }
      });
      
      // Remove from bundle slots
      container.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-item')) {
          const index = parseInt(e.target.dataset.index);
          this.removeFromSlot(bundleId, index);
        }
      });
      
      // Clear bundle
      const clearBtn = document.getElementById(`clear-bundle-${bundleId}`);
      if (clearBtn) {
        clearBtn.addEventListener('click', () => this.clearBundle(bundleId));
      }
      
      // Add to cart
      const addToCartBtn = document.getElementById(`add-to-cart-${bundleId}`);
      if (addToCartBtn) {
        addToCartBtn.addEventListener('click', () => this.addToCart(bundleId));
      }
    },
    
    addToBundle: function(bundleId, productId, variantId) {
      const bundle = this.bundles[bundleId];
      const totalItems = this.getTotalItems(bundleId);
      
      if (totalItems >= bundle.size) {
        this.showMessage(bundleId, '{{ "bundle.bundleFull" | t }}', 'error');
        return;
      }
      
      const productCard = document.querySelector(`[data-product-id="${productId}"][data-variant-id="${variantId}"][data-bundle-id="${bundleId}"]`);
      
      // Get product title - handle both linked and non-linked titles
      const productTitle = productCard.querySelector('.product-title a')?.textContent.trim() || productCard.querySelector('.product-title').textContent.trim();
      const productImage = productCard.querySelector('.product-image').src;
      const variant = productCard.dataset.variant;
      const existingItem = bundle.items.find(item => item.id === productId && item.variantId === variantId);
      if (existingItem) {
        existingItem.quantity++;
      } else {
        bundle.items.push({
          id: productId,
          variantId: variantId,
          title: productTitle,
          image: productImage,
          quantity: 1,
          variant: variant
        });
      }
      
      this.renderBundleSlots(bundleId);
      this.updateProductCard(bundleId, productId, variantId, variant);
      this.updateBundleSummary(bundleId);
    },
    
    updateQuantity: function(bundleId, productId, variantId, variant, change) {
      const bundle = this.bundles[bundleId];
      const item = bundle.items.find(item => item.id === productId && item.variantId === variantId);
      
      if (item) {
        const newQuantity = item.quantity + change;
        
        // Check if trying to increase quantity would exceed bundle limit
        if (change > 0) {
          const totalItems = this.getTotalItems(bundleId);
          if (totalItems >= bundle.size) {
            this.showMessage(bundleId, '{{ "bundle.bundleFull" | t }}', 'error');
            return;
          }
        }
        
        if (newQuantity <= 0) {
          bundle.items = bundle.items.filter(item => item.id !== productId && item.variantId !== variantId);
        } else {
          item.quantity = newQuantity;
        }
        
        this.renderBundleSlots(bundleId);
        this.updateProductCard(bundleId, productId, variantId, variant);
        this.updateBundleSummary(bundleId);
      }
    },
    
    removeFromSlot: function(bundleId, slotIndex) {
      const bundle = this.bundles[bundleId];
      const flattenedItems = this.getFlattenedItems(bundleId);
      
      if (flattenedItems[slotIndex]) {
        const { id: productId, variantId, variant } = flattenedItems[slotIndex];
        this.updateQuantity(bundleId, productId, variantId, variant, -1);
      }
    },
    
    clearBundle: function(bundleId) {
      this.bundles[bundleId].items = [];
      this.renderBundleSlots(bundleId);
      this.updateAllProductCards(bundleId);
      this.updateBundleSummary(bundleId);
    },
    
    renderBundleSlots: function(bundleId) {
      const bundle = this.bundles[bundleId];
      const slotsContainer = document.getElementById(`bundle-slots-${bundleId}`);
      const flattenedItems = this.getFlattenedItems(bundleId);
      
      slotsContainer.innerHTML = '';
      
      for (let i = 0; i < bundle.size; i++) {
        const slot = document.createElement('div');
        slot.className = 'bundle-slot';
        slot.dataset.index = i;
        
        if (flattenedItems[i]) {
          slot.classList.add('filled');
          slot.innerHTML = `
            <img src="${flattenedItems[i].image}" alt="${flattenedItems[i].title}">
            <button class="remove-item" data-index="${i}">Ã—</button>
          `;
        } else {
          slot.innerHTML = `
            <div class="slot-placeholder">
              <span class="slot-number">${i + 1}</span>
            </div>
          `;
        }
        
        slotsContainer.appendChild(slot);
      }
      
      this.updateAddToCartButton(bundleId);
    },
    
    updateProductCard: function(bundleId, productId, variantId, variant) {
      const bundle = this.bundles[bundleId];
      const productCard = document.querySelector(`[data-product-id="${productId}"][data-variant-id="${variantId}"][data-bundle-id="${bundleId}"]`);
      const item = bundle.items.find(item => item.id === productId && item.variantId === variantId);
      const quantity = item ? item.quantity : 0;
      
      const addBtn = productCard.querySelector('.add-to-bundle-btn');
      const quantityControls = productCard.querySelector('.quantity-controls');
      const quantityDisplay = productCard.querySelector('.quantity-display');
      
      const showQuantity = quantity > 0;
      addBtn.classList.toggle('hidden', showQuantity);
      quantityControls.classList.toggle('hidden', !showQuantity);
      if (showQuantity) {
        quantityDisplay.textContent = quantity;
      }
    },
    
    updateAllProductCards: function(bundleId) {
      const bundle = this.bundles[bundleId];
      const container = document.querySelector(`[data-bundle-id="${bundleId}"]`);
      const productCards = container.querySelectorAll('.bundle-product-card');
      
      productCards.forEach(card => {
        const productId = card.dataset.productId;
        const variantId = card.dataset.variantId;
        const variant = card.dataset.variant;
        this.updateProductCard(bundleId, productId, variantId, variant);
      });
    },
    
    updateBundleSummary: function(bundleId) {
      const bundle = this.bundles[bundleId];
      const totalItems = this.getTotalItems(bundleId);
      const summary = document.getElementById(`bundle-summary-${bundleId}`);
      
      if (summary) {
        if (totalItems === 0) {
          // For empty bundle, use the static message with bundle size
          summary.innerHTML = `<p class="bundle-status">Select ${bundle.size} products to complete your box</p>`;
        } else if (totalItems === bundle.size) {
          summary.innerHTML = `<p class="bundle-status bundle-complete">{{ 'bundle.bundleComplete' | t }}</p>`;
        } else {
          // For partial bundle, show progress
          summary.innerHTML = `<p class="bundle-status">${totalItems} of ${bundle.size} items selected</p>`;
        }
      }
    },
    
    updateAddToCartButton: function(bundleId) {
      const bundle = this.bundles[bundleId];
      const totalItems = this.getTotalItems(bundleId);
      const addToCartBtn = document.getElementById(`add-to-cart-${bundleId}`);
      const giftMessageInput = document.getElementById(`bundle-gift-message-${bundleId}`);
      const isBundleFull = totalItems === bundle.size;

      if (addToCartBtn) {
        addToCartBtn.classList.toggle('hidden', !isBundleFull);
      }

      if (giftMessageInput) {
        giftMessageInput.style.outlineColor = isBundleFull ? 'var(--bundle-color)' : 'var(--bundle-border)';
      }
    },
    
    addToCart: function(bundleId) {
      const bundle = this.bundles[bundleId];
      const totalItems = this.getTotalItems(bundleId);
      
      if (totalItems === 0) {
        this.showMessage(bundleId, '{{ "bundle.bundleEmpty" | t }}', 'error');
        return;
      }
      
      if (totalItems !== bundle.size) {
        this.showMessage(bundleId, '{{ "bundle.bundleIncomplete" | t }}', 'error');
        return;
      }

      // Add gift message to bundle
      const giftMessageInput = document.getElementById(`bundle-gift-message-${bundleId}`);
      const giftMessage = giftMessageInput.value;
      
      // Prepare bundle data for cart
      const bundleData = {
        items: bundle.items,
        bundle_id: bundleId,
        total_items: totalItems,
        gift_message: giftMessage
      };
      
      // Add to cart using Shopify's cart API
      this.addBundleToCart(bundleData);
    },
    
    /**
     * Add all bundle items to cart via AJAX
     * @param {Object} bundleData - Bundle data containing items array
     */
    addBundleToCart: function(bundleData) {
      const addToCartBtn = document.getElementById(`add-to-cart-${bundleData.bundle_id}`);
      
      // Disable button during request
      if (addToCartBtn) {
        addToCartBtn.disabled = true;
        addToCartBtn.textContent = '{{ "bundle.addingBundleToCart" | t }}';
      }

      let line_item_properties = {};
      let note_detail = '' // 'Bundle includes: \n';

      bundleData.items.forEach(bundleItem => {
        // line_item_properties[bundleItem.title] = bundleItem.quantity;
        note_detail += bundleItem.title + ' (' + bundleItem.quantity + '), \n';
      });

      note_detail = note_detail.slice(0, -3); // Remove the last ', \n'
      line_item_properties['Details'] = note_detail;
      line_item_properties['Gift Message'] = bundleData.gift_message;

      // Get the bundle variant ID from the bundle data
      const bundle = this.bundles[bundleData.bundle_id];
      const bundleVariantId = bundle.variantId;
      
      // Create a promise for each item to be added to cart
      let formData = {
        'items': [{
          'id': bundleVariantId,
          'quantity': 1,
          'properties': line_item_properties
        }]
      };
      
      // Make the AJAX request
      fetch('/cart/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.url;
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        
        // Show error message
        this.showMessage(bundleId, '{{ "bundle.errorAddingToCart" | t }}', 'error');
      })
      .finally(() => {
        // Redirect to cart page
        window.location.href = "/cart";
      });
    },
    
    getTotalItems: function(bundleId) {
      const bundle = this.bundles[bundleId];
      return bundle.items.reduce((sum, item) => sum + item.quantity, 0);
    },
    
    getFlattenedItems: function(bundleId) {
      const bundle = this.bundles[bundleId];
      const flattened = [];
      
      bundle.items.forEach(item => {
        for (let i = 0; i < item.quantity; i++) {
          flattened.push(item);
        }
      });
      
      return flattened;
    },
    
    showMessage: function(bundleId, message, type) {
      const container = document.querySelector(`[data-bundle-id="${bundleId}"]`);
      const existingMessage = container.querySelector('.bundle-message');
      
      if (existingMessage) {
        existingMessage.remove();
      }
      
      const messageEl = document.createElement('div');
      messageEl.className = `bundle-message bundle-message-${type}`;
      messageEl.textContent = message;
      
      container.appendChild(messageEl);
      
      setTimeout(() => {
        messageEl.remove();
      }, 3000);
    }
  };
  
  // Initialize all bundles on the page
  document.addEventListener('DOMContentLoaded', function() {
    const bundleContainers = document.querySelectorAll('.product-bundle-container');
    bundleContainers.forEach(container => {
      const bundleId = container.dataset.bundleId;
      BundleManager.init(bundleId);
    });
  });
  
  // Make BundleManager available globally for debugging
  window.BundleManager = BundleManager;
})();
</script> 